// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

// ORS filter
type BusFilterInput struct {
	Account    *OperatorMapInput `json:"account,omitempty"`
	Role       *OperatorMapInput `json:"role,omitempty"`
	Depts      *OperatorMapInput `json:"depts,omitempty"`
	Permission *OperatorMapInput `json:"permission,omitempty"`
	Extra      *OperatorMapInput `json:"extra,omitempty"`
}

// 网关定制的filter
type MakerFilterInput struct {
	ORs []*BusFilterInput `json:"_ORs,omitempty"`
}

// Operator Map Input
type OperatorMapInput struct {
	Eq    *string    `json:"eq,omitempty"`
	Neq   *string    `json:"neq,omitempty"`
	Like  *string    `json:"like,omitempty"`
	Nlike *string    `json:"nlike,omitempty"`
	Ieq   *string    `json:"ieq,omitempty"`
	In    []*string  `json:"in,omitempty"`
	Nin   []*string  `json:"nin,omitempty"`
	Gt    *float64   `json:"gt,omitempty"`
	Lt    *float64   `json:"lt,omitempty"`
	Gte   *float64   `json:"gte,omitempty"`
	Lte   *float64   `json:"lte,omitempty"`
	Bt    []*float64 `json:"bt,omitempty"`
	Nbt   []*float64 `json:"nbt,omitempty"`
	Nnull *string    `json:"nnull,omitempty"`
	Inull *string    `json:"inull,omitempty"`
}

type Role string

const (
	RoleAdmin Role = "ADMIN"
	RoleUser  Role = "USER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
